
CREATE TABLE CALLS_COPY
AS SELECT * FROM  CALLS;

CREATE TABLE  CUSTOMERS_COPY
AS SELECT * FROM  CUSTOMERS;

ALTER TABLE CALLS_COPY 
ADD call_type_id VARCHAR2(50);

UPDATE CALLS_COPY
SET call_type_id = CASE WHEN IS_INTERNATIONAL = 'TRUE' THEN 'international' else 'fucto' END;

create table INTER_FUCTO AS
select c.CONNECTION_ID, c.call_type_id 
from calls_copy c;

UPDATE calls_copy
SET call_type_id = CASE WHEN IS_ROAMING = 'TRUE' THEN 'roaming' else 'fucto' END;

create table ROAMING_FUCTO AS
select c.CONNECTION_ID, c.call_type_id 
from calls_copy c;

CREATE TABLE FUSION AS
SELECT i.CONNECTION_ID, i.call_type_id, r.call_type_id as call_type_id2 
from inter_fucto i, roaming_fucto r
where i.CONNECTION_ID = r.CONNECTION_ID;

DROP TABLE INTER_FUCTO PURGE;
DROP TABLE ROAMING_FUCTO PURGE;

---CREATING NEW TABLES GROUPPING BY INTER,ROAMING,FUCTO

create table INTER_FUCTO_2 AS
SELECT F.CONNECTION_ID, F.CALL_TYPE_ID
FROM FUSION F
WHERE F.CALL_TYPE_ID = 'international';

create table ROAMING_FUCTO_2 AS
SELECT F.CONNECTION_ID, F.CALL_TYPE_ID2 as call_type_id
FROM FUSION F
WHERE F.CALL_TYPE_ID2 = 'roaming';

create table FUCTO_FUCTO AS
SELECT F.CONNECTION_ID, F.CALL_TYPE_ID
FROM FUSION F
WHERE F.CALL_TYPE_ID = 'fucto' AND F.CALL_TYPE_ID2 = 'fucto';

DROP TABLE FUSION PURGE;

---LETS CHECK WITH THE DATES

CREATE TABLE DAYS_TABLE AS
SELECT DISTINCT
C.CALL_TIME,
to_char(C.CALL_TIME,'DAY') as Day
FROM CALLS_COPY C;

--- ADDING DATE TO FUCTO_FUCTO AND FILTERING BY PEAK/NO PEAK

CREATE TABLE FUCTO_DAYS AS
SELECT F.CONNECTION_ID, F.call_type_id, C.CALL_TIME
FROM FUCTO_FUCTO F, CALLS_COPY C
WHERE F.CONNECTION_ID = C.CONNECTION_ID;

DROP TABLE FUCTO_FUCTO PURGE;

CREATE TABLE FUCTO_DAYS_1 AS
SELECT F.CONNECTION_ID, F.call_type_id, F.CALL_TIME, D.DAY 
from FUCTO_DAYS F, DAYS_TABLE D
where F.CALL_TIME = D.CALL_TIME;

ALTER TABLE FUCTO_DAYS_1
DROP COLUMN CALL_TYPE_ID;

ALTER TABLE FUCTO_DAYS_1 
ADD CALL_TYPE_ID VARCHAR2(50);

UPDATE FUCTO_DAYS_1 SET CALL_TYPE_ID = 'peak'
WHERE DAY NOT LIKE 'D%';
UPDATE FUCTO_DAYS_1 SET CALL_TYPE_ID = 'off-peak'
WHERE DAY LIKE 'D%';
UPDATE FUCTO_DAYS_1 SET CALL_TYPE_ID = 'off-peak'
WHERE DAY LIKE 'S%';

CREATE TABLE PEAK AS
SELECT * FROM FUCTO_DAYS_1
WHERE CALL_TYPE_ID = 'peak';

CREATE TABLE OFFPEAK AS
SELECT * FROM FUCTO_DAYS_1
WHERE CALL_TYPE_ID = 'off-peak';


CREATE TABLE TYPE_CLASS AS
SELECT CONNECTION_ID, CALL_TYPE_ID, 'INTERNATIONAL' "Type" FROM
INTER_FUCTO_2
UNION
SELECT CONNECTION_ID, CALL_TYPE_ID, 'ROAMING' "Type" From
ROAMING_FUCTO_2
UNION
SELECT CONNECTION_ID, CALL_TYPE_ID, 'PEAK' "Type" FROM
PEAK
UNION
SELECT CONNECTION_ID, CALL_TYPE_ID, 'OFF-PEAK' "Type" FROM
OFFPEAK;

DROP TABLE INTER_FUCTO_2 PURGE;
DROP TABLE ROAMING_FUCTO_2 PURGE;
DROP TABLE PEAK PURGE;
DROP TABLE OFFPEAK PURGE;

CREATE TABLE CALLS2 AS
SELECT C.PHONE_NUMBER, C.call_TIME, C.DURATION, C.CONNECTION_ID, T.CALL_TYPE_ID 
from CALLS_COPY C, TYPE_CLASS T
where C.CONNECTION_ID = T.CONNECTION_ID;

DROP TABLE TYPE_CLASS PURGE;

CREATE TABLE CALLS3 AS
SELECT C.PHONE_NUMBER, C.call_TIME, C.DURATION, C.CONNECTION_ID, C.CALL_TYPE_ID, CU.PLAN_ID 
from CALLS2 C, CUSTOMERS CU
where C.PHONE_NUMBER = CU.PHONE_NUMBER;

CREATE TABLE CALL_RATES_COPY
AS SELECT * FROM  CALL_RATES;

CREATE TABLE RATE_TYPES_COPY
AS SELECT * FROM  RATE_TYPES;

CREATE TABLE CALL_RATES1 AS
SELECT C.CALL_TYPE_ID, C.PLAN_ID, C.COST_PER_MINUTE, R.NAME
from CALL_RATES_COPY C, RATE_TYPES_COPY R
where C.CALL_TYPE_ID = R.ID;

DROP TABLE CALL_RATES_COPY PURGE;
DROP TABLE RATE_TYPES_COPY PURGE;

ALTER TABLE CALL_RATES1
DROP COLUMN CALL_TYPE_ID;

ALTER TABLE CALL_RATES1
RENAME COLUMN NAME TO CALL_TYPE_ID;

------ CONCATENATING COLUMNS TO PUT TOUGHER

ALTER TABLE CALL_RATES1 
ADD TIPO VARCHAR2(50);

UPDATE CALL_RATES1
    SET TIPO = CONCAT(PLAN_ID, CALL_TYPE_ID);

ALTER TABLE CALLS3 
ADD TIPO VARCHAR2(50);

UPDATE CALLS3
    SET TIPO = concat(PLAN_ID, CALL_TYPE_ID);
    
CREATE TABLE CALLS4 AS
SELECT  CA.PHONE_NUMBER, CA.call_TIME, CA.DURATION, CA.CONNECTION_ID, CA.CALL_TYPE_ID, CA.PLAN_ID, Ca.tipo, CR.COST_PER_MINUTE FROM CALLS3 CA
FULL OUTER JOIN CALL_RATES1 CR
ON CA.TIPO = CR.TIPO;

UPDATE CALLS4 SET duration = duration /60/60/60/60/60/60/60/60;

CREATE TABLE CALLS5 AS
SELECT PHONE_NUMBER, call_TIME, DURATION, CONNECTION_ID, CALL_TYPE_ID, PLAN_ID, tipo, COST_PER_MINUTE,
 DURATION * COST_PER_MINUTE  AS total_price
FROM CALLS4;


DROP TABLE CALL_RATES1 PURGE;
DROP TABLE CALLS2 PURGE;
DROP TABLE CALLS3 PURGE;
DROP TABLE CALLS4 PURGE;

---CALCULATING NUMBER OF CALLS DID BY EACH CLIENT(PHONE NUMBER)

CREATE TABLE NUMBER_CALLS AS
SELECT PHONE_NUMBER, COUNT(*)NUMBERCALLS FROM calls5
GROUP BY
    PHONE_NUMBER
HAVING 
    COUNT(*) > 1;
    
CREATE TABLE CALCULO AS
SELECT C.PHONE_NUMBER,C.PLAN_ID, N.NUMBERCALLS
FROM CUSTOMERS_COPY C, NUMBER_CALLS N
WHERE C.PHONE_NUMBER = N.PHONE_NUMBER;

DROP TABLE FUCTO_DAYS PURGE;
DROP TABLE FUCTO_DAYS_1 PURGE;


----- CALCULATING PHONE_NUMBERS AVERAGES

CREATE TABLE SUM_CALL_COST AS
SELECT PHONE_NUMBER, ROUND(SUM(TOTAL_PRICE)) AS SUM_CALL_COST
FROM CALLS5
GROUP BY PHONE_NUMBER;

CREATE TABLE AVR_CALLDURATION AS
SELECT PHONE_NUMBER, ROUND(AVG(DURATION)) AS AVR_CALL_DURATION
FROM CALLS5
GROUP BY PHONE_NUMBER;

CREATE TABLE AVR_CALL_COST AS
SELECT PHONE_NUMBER, ROUND(AVG(COST_PER_MINUTE)) AS AVR_CALL_COST
FROM CALLS5
GROUP BY PHONE_NUMBER;

CREATE TABLE MAX_CALL_COST AS
SELECT PHONE_NUMBER, ROUND(MAX(TOTAL_PRICE)) AS MAX_CALL_COST
FROM CALLS5
GROUP BY PHONE_NUMBER;

CREATE TABLE AVR_TOTAL_PRICE AS
SELECT PHONE_NUMBER, ROUND(AVG(TOTAL_PRICE)) AS AVR_TOTAL_PRICE
FROM CALLS5
GROUP BY PHONE_NUMBER;

CREATE TABLE AVERAGES AS
SELECT CU.PHONE_NUMBER, NC.NUMBERCALLS, MC.MAX_CALL_COST, CD.AVR_CALL_DURATION, CC.AVR_CALL_COST, AT.AVR_TOTAL_PRICE, SCC.SUM_CALL_COST
FROM CUSTOMERS_COPY CU,NUMBER_CALLS NC, MAX_CALL_COST MC, AVR_CALLDURATION CD, AVR_CALL_COST CC, AVR_TOTAL_PRICE AT, SUM_CALL_COST SCC
WHERE 
CU.PHONE_NUMBER = NC.PHONE_NUMBER AND
CU.PHONE_NUMBER = MC.PHONE_NUMBER AND
CU.PHONE_NUMBER = CD.PHONE_NUMBER AND
CU.PHONE_NUMBER = CC.PHONE_NUMBER AND
CU.PHONE_NUMBER = SCC.PHONE_NUMBER AND
CU.PHONE_NUMBER = AT.PHONE_NUMBER;

DROP TABLE NUMBER_CALLS PURGE;
DROP TABLE AVR_CALLDURATION PURGE;
DROP TABLE MAX_CALL_COST PURGE;
DROP TABLE AVR_CALL_COST PURGE;
DROP TABLE AVR_TOTAL_PRICE PURGE;
DROP TABLE SUM_CALL_COST PURGE;

-----CUSTOMERSERVICE

CREATE TABLE CUSTOMER_SERVICE_COPY
AS SELECT * FROM CUSTOMER_SERVICE;

UPDATE CUSTOMER_SERVICE_COPY SET duration = duration /60/60/60/60/60/60/60/60;

CREATE TABLE SERVICE_CALLS AS
SELECT PHONE_NUMBER, COUNT(*)SERVICE_CALLS_NUM FROM CUSTOMER_SERVICE_COPY
GROUP BY
    PHONE_NUMBER
HAVING 
    COUNT(*) > 1;
    
ALTER TABLE SERVICE_CALLS
RENAME COLUMN PHONE_NUMBER TO PHONENUMBER;
  
CREATE TABLE SERVICE_DURATION AS
SELECT PHONE_NUMBER, ROUND(AVG(DURATION)) AS AVG_CS_DURATION
FROM CUSTOMER_SERVICE_COPY
GROUP BY PHONE_NUMBER;

CREATE TABLE SERVICE_UNION AS
SELECT SC.PHONENUMBER, SC.SERVICE_CALLS_NUM, SD.AVG_CS_DURATION
FROM SERVICE_CALLS SC, SERVICE_DURATION SD
WHERE SC.PHONENUMBER = SD.PHONE_NUMBER;

CREATE TABLE AVERAGES1 AS
SELECT * FROM AVERAGES AV
LEFT JOIN SERVICE_UNION SU ON AV.PHONE_NUMBER = SU.PHONENUMBER;

DROP TABLE AVERAGES PURGE;

ALTER TABLE AVERAGES1
DROP COLUMN PHONENUMBER;

DROP TABLE SERVICE_UNION PURGE;
DROP TABLE SERVICE_DURATION PURGE;
DROP TABLE SERVICE_CALLS PURGE;

---VOICEMAILS

CREATE TABLE VOICEMAILS_COPY
AS SELECT * FROM VOICEMAILS;

UPDATE VOICEMAILS_COPY SET duration = duration /60/60/60/60/60/60/60;

CREATE TABLE VOICEMAILS_1 AS
SELECT PHONE_NUMBER, COUNT(*)VOICEMAILS_NUM FROM VOICEMAILS_COPY
GROUP BY
    PHONE_NUMBER
HAVING 
    COUNT(*) > 1;

CREATE TABLE VOICEMAILS_DURATION AS
SELECT PHONE_NUMBER, ROUND(AVG(DURATION)) AS AVG_VOICE_DURATION
FROM VOICEMAILS_COPY
GROUP BY PHONE_NUMBER;

CREATE TABLE VOICEMAILS_2 AS
SELECT V1.PHONE_NUMBER, V1.VOICEMAILS_NUM, VD.AVG_VOICE_DURATION
FROM VOICEMAILS_1 V1, VOICEMAILS_DURATION VD
WHERE V1.PHONE_NUMBER = VD.PHONE_NUMBER;

DROP TABLE VOICEMAILS_1 PURGE;
DROP TABLE VOICEMAILS_DURATION PURGE;

ALTER TABLE VOICEMAILS_2
RENAME COLUMN PHONE_NUMBER TO PHONENUMBER;

CREATE TABLE AVERAGES AS
SELECT * FROM AVERAGES1 AV
LEFT JOIN VOICEMAILS_2 V2 ON AV.PHONE_NUMBER = V2.PHONENUMBER;

DROP TABLE AVERAGES1 PURGE;

ALTER TABLE AVERAGES
DROP COLUMN PHONENUMBER;

DROP TABLE VOICEMAILS_2 PURGE;

CREATE TABLE RATE_TYPES_COPY
AS SELECT * FROM  RATE_TYPES;

ALTER TABLE RATE_TYPES_COPY
RENAME COLUMN NAME TO PLAN;

CREATE TABLE CUSTOMERS1 AS
SELECT * FROM CUSTOMERS_COPY C
RIGHT JOIN RATE_TYPES_COPY RT
ON C.PLAN_ID = RT.ID;

DROP TABLE CUSTOMERS_COPY PURGE;
DROP TABLE CALLS_COPY PURGE;
DROP TABLE DAYS_TABLE PURGE;
DROP TABLE RATE_TYPES_COPY PURGE;
DROP TABLE VOICEMAILS_COPY PURGE;

ALTER TABLE CUSTOMERS1
DROP COLUMN PLAN_ID;
ALTER TABLE CUSTOMERS1
DROP COLUMN ID;

ALTER TABLE AVERAGES
RENAME COLUMN PHONE_NUMBER TO PHONENUMBER;

--CREATING THE FINAL TABLE WITH ALL THE INFORMATION TO ANALYSIS OF EACH CLIENT 

CREATE TABLE CUSTOMERS_TOTAL_TABLE AS
SELECT * FROM CUSTOMERS1 C
LEFT JOIN AVERAGES AV ON C.PHONE_NUMBER = AV.PHONENUMBER;

DROP TABLE CUSTOMERS1 PURGE;

ALTER TABLE CUSTOMERS_TOTAL_TABLE
DROP COLUMN PHONENUMBER;

DROP TABLE CUSTOMER_SERVICE_COPY PURGE;
DROP TABLE CALLS5 PURGE;
DROP TABLE AVERAGES PURGE;
DROP TABLE CALCULO PURGE;

---CHEKING 3 CUSTOMERS RANDOMLY AND CHECKING ALL THEIR DATA:

CREATE TABLE USER1 AS
SELECT * FROM
( SELECT * FROM CUSTOMERS_TOTAL_TABLE
ORDER BY dbms_random.value )
WHERE rownum = 1;

CREATE TABLE USER2 AS
SELECT * FROM
( SELECT * FROM CUSTOMERS_TOTAL_TABLE
ORDER BY dbms_random.value )
WHERE rownum = 1;

CREATE TABLE USER3 AS
SELECT * FROM
( SELECT * FROM CUSTOMERS_TOTAL_TABLE
ORDER BY dbms_random.value )
WHERE rownum = 1;
----------------------
----------------------
SELECT /*text*/ * FROM CUSTOMERS_TOTAL_TABLE;
SELECT /*text*/ * FROM USER1;
SELECT /*text*/ * FROM USER2;
SELECT /*text*/ * FROM USER3;


